<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
  <Product Id="*"
      Name="DirectOutput"
      Language="1033"
      Version="!(bind.FileVersion.MainDofDll)"
      Manufacturer="DirectOutput"
      UpgradeCode="75f5d8f8-a58b-4a2c-91db-eeef0a114582">
		
		<?define DOFCOMObjectGUID="A23BFDBC-9A8A-46C0-8672-60F23D54FFB6"?>

    <Package 
			Description="DirectOutput" 
		  InstallerVersion="200"
		  Compressed="yes"
		  InstallScope="perUser" />

    <!--
      MSI's default settings allow multiple versions of a program to be
      installed alongside one another simultaneously.  That's what you want
      for most applications, but not for DOF.  DOF's design makes it highly
      problematic if multiple versions are installed, since DOF consists of
      a bunch C# DLLs that have to be in sync with each other, and it hooks
      into other programs (B2S, PBX) via registry keys and file shortcuts.
      It's the global nature of those file references that makes it such a
      problem to have multiple copies of DOF around.  So we override the
      defaults to try to ensure that only one copy is ever installed.
      In particular, we set AllowDowngrades="yes" to allow the user to 
      switch to newer or older DOF versions at any time.  This prevents
      MSI from creating a new installed product record if installing an
      older (or equal) version.
    -->
    <MajorUpgrade 
      AllowDowngrades="yes"
      IgnoreRemoveFailure="no"
      Schedule="afterInstallInitialize" />
    <MediaTemplate EmbedCab="yes" />

    <!-- Components to install -->
    <Feature Id="ProductFeature" Title="DirectOutput" Level="1">
      <ComponentRef Id="DofFiles" />
      <ComponentRef Id="SampleConfigFiles" />
      <ComponentRef Id="DirectOutputComObject.dll" />  <!-- from Generated/RegisterDirectOutputComObjectDll.wxs -->
      <ComponentRef Id="DirectOutputComObject.tlb" />  <!-- from Generated/RegisterDirectOutputComObjectTlb.wxs -->
    </Feature>
    
    <!--
        Generated/RegisterDirectOutputComObjectDll.wxs is generated automatically
        by a special target in the project file.  You can't see the target from
        within the Visual Studio IDE, but you can see it if you edit the source
        (DOFSetup.wixproj).  See <Target Name="BeforeBuild"> - the registration
        entry is generated by a <HeatFile> target therein.
        
        <HeatFile> invokes a WiX tool that extracts the COM object registration
        data from the DLL and generates a WiX file with suitable entries to add
        the registration entries to the MSI script.  The tool also includes the
        DLL file itself in the build, so we don't have to include it manually.
        
        We use the <HeatFile> approach because it's the "right" way of handling 
        COM object registration in WiX.  I don't like the way the target is
        hidden from the IDE view, but this is by far the most automatic way to
        do this and ensures that everything stays up to date, so it seems like
        an equitable trade.
    -->
    
    <!-- At run time, show the dialog UI to select the destination folder -->
    <Property Id="WIXUI_INSTALLDIR" Value="DOFDIR" />
    <UIRef Id="WixUI_InstallDirCustom" />

    <!-- Custom license file for the dialog UI -->
    <WixVariable Id="WixUILicenseRtf" Value="res\DOFLicense.rtf" />
    
    <!-- Custom UI dialog bitmaps -->
    <WixVariable Id="WixUIBannerBmp" Value="res\Banner.bmp" />
    <WixVariable Id="WixUIDialogBmp" Value="res\DialogSide.bmp" />

    <!-- Custom B2SFixup Action.  This is a separate WiX C# Custom Action 
         project.  The custom action does the special B2S plugin setup 
         required for DOF: it finds the B2S DLL from its COM object 
         registration; creates the Plugins\DirectOutput shortcut to the
         new DOF folder; enables plugins in the B2S registry settings; and 
         edits the B2S config file to suppress missing backglass warnings.  
         This is all weird custom stuff outside of the normal MSI scope, 
         which is why we need to do it with a custom action instead of the
         normal WiX declarative model.
         
         Note that we have to run this action in Execute="deferred" mode, so
         that it runs after the DOF folder has been created.  The shortcut
         we create won't work if we create it before the folder exists.
    -->
    <Binary Id="B2SFixupDLL" SourceFile="$(var.DOFSetupB2SFixup.TargetDir)DOFSetupB2SFixup.CA.dll" />
    <CustomAction
      Id="B2SFixup"
      Return="check"
      Execute="deferred"
      BinaryKey="B2SFixupDLL"
      DllEntry="B2SFixup" />
    
    <!-- Custom PBXFixup action.  This is another custom action, this time
         for setting up the PinballX plugin.  For this, we have to find
         the PBX install folder, the only good way to do which seems to be
         from the uninstall records in the registry; copy our plugin DLL
         to the PBX install folder's Plugins directory; and edit the PBX
         .INI file to add the DOF plugin if it's not already there, and 
         enable it in either case.
    -->
    <Binary Id="PBXFixupDLL" SourceFile="$(var.DOFSetupPBXFixup.TargetDir)DOFSetupPBXFixup.CA.dll" />
    <CustomAction
      Id="PBXFixup"
      Return="check"
      Execute="deferred"
      BinaryKey="PBXFixupDLL"
      DllEntry="PBXFixup" />
    
    <!-- Our B2SFixup and PBXFixup custom tasks have to run deferred, and as 
         a result they don't have access to session.GetTargetPath() to identify 
         the install folder.  (That seems to be an MSI limitation, not WiX.)
         To pass the folder path, we have to use a property, which we can do
         with ANOTHER Custom Action.  We can access the property listed in 
         Value="" from the C# code via session.CustomActionData[].
    -->
    <CustomAction
      Id="SetB2SVars"
      Return="check"
      Property="B2SFixup" Value="INSTALLEDPATH=[DOFDIR]" />
    <CustomAction
      Id="SetPBXVars"
      Return="check"
      Property="PBXFixup" Value="INSTALLEDPATH=[DOFDIR]" />

    <!-- Set up our custom action sequence.  The property setter has to run
         before each C# task. -->
    <InstallExecuteSequence>
      <Custom Action="SetB2SVars" Before="B2SFixup" />
      <Custom Action="B2SFixup" Before="InstallFinalize">NOT REMOVE="ALL"</Custom>
      <Custom Action="SetPBXVars" Before="PBXFixup" />
      <Custom Action="PBXFixup" Before="InstallFinalize">NOT REMOVE="ALL"</Custom>
    </InstallExecuteSequence>

  </Product>

  <Fragment>
    <!-- Retrieve the old install folder from the registry, if set -->
    <Property Id="INSTALLFOLDER">
      <RegistrySearch 
        Id="InstallFolder" Type="raw"
        Root="HKCU" Key="SOFTWARE\DirectOutput\DirectOutput" Name="InstallPath"/>
    </Property>

    <!-- 
      Install folder root - default to X:\DirectOutput (where X: is the
      Windows install volume).  Note that the RegistrySearch property
      setting above will override this if the key exists, so we'll
      propose installing in same current folder if a previous version
      already exists.
    -->
    <!-- <SetDirectory Id="INSTALLFOLDER" Value="[WindowsVolume]DirectOutput" /> -->
    <Directory Id="TARGETDIR" Name="SourceDir">
      <Directory Id="WINDOWSVOLUME">
        <Directory Id="INSTALLFOLDER" Name="DirectOutput">
          <Directory Id="DOFDIR" >
            <Directory Id="DOFCONFIGDIR" Name="Config" >
              <Directory Id="DOFCONFIGEXAMPLESDIR" Name="Examples"/>
            </Directory>
          </Directory>
        </Directory>
      </Directory>
    </Directory>
  </Fragment>

  <Fragment>
    <DirectoryRef Id="DOFDIR">
      <Component Id="DofFiles" Guid="F1126C16-DACD-4D27-9C20-C5589D53EE2A">
				
        <!-- save the install folder for subsequent updates -->
        <RegistryKey Root="HKCU" Key="SOFTWARE\DirectOutput\DirectOutput">
          <RegistryValue Type="string" Name="InstallPath" Value="[DOFDIR]"/>
        </RegistryKey>

        <!-- 
          DOF has multiple DLL components that always need to be in sync, so it's
          important to make sure we have a consistent set.  All of the DLL files
          should thus be explicitly removed, in case we're replacing an existing
          installation.
        -->
        <RemoveFile Id="RemoveDof" Name="$(var.DirectOutput.TargetFileName)" On="install" />
        <RemoveFile Id="RemoveB2S" Name="$(var.B2SServerPlugin.TargetFileName)" On="install" />
        <RemoveFile Id="RemoveB2Spi" Name="B2SServerPluginInterface.dll" On="install" />
        <RemoveFile Id="RemoveComObj" Name="DirectOutputComObject.dll" On="install" />
        <RemoveFile Id="RemovePBX" Name="$(var.DirectOutput PinballX Plugin.TargetFileName)" On="install" />
        <RemoveFile Id="RemoveComReg" Name="$(var.DirectOutputComObjectRegister.TargetFileName)" On="install" />
        <RemoveFile Id="RemoveCfgTest" Name="$(var.DirectOutputConfigTester.TargetFileName)" On="install" />
        <RemoveFile Id="RemoveCfgEd" Name="$(var.GlobalConfigEditor.TargetFileName)" On="install" />
        <RemoveFile Id="RemoveLedTst" Name="$(var.LedControlFileTester.TargetFileName)" On="install" />
        <RemoveFile Id="RemoveProSlv" Name="$(var.ProPinballSlave.TargetFileName)" On="install" />
				
				<!--
				  DOF uses a bunch of third-party DLLs as dependencies.  In past versions,
					these were included as separate DLLs to be installed in the DOF folder.
					This caused all sorts of problems because DOF doesn't have control over
					the DLL search path, given that the search path is a function of the
					application .EXE, and DOF is itself a loaded DLL.  In an attempt to
					avoid the many deployment problems this caused, we now use the 
					Costura.Fody system	to embed dependency DLLs in the main DOF DLLs.  
					This makes it unnecessary to include the dependency DLLs as separate
					installable files in the setup.  If we're upgrading a system with an
					old installation, it might have those now-defunct files.  So explicitly
					delete them to reduce confusion and cruft left behind on the system.
				-->
				<RemoveFile Id="RemoveNJ" Name="Newtonsoft.Json.dll" On="install" />
				<RemoveFile Id="RemoveFlee" Name="Ciloci.Flee.dll" On="install" />
				<RemoveFile Id="RemoveFTD2XX32" Name="FTD2XX32.dll" On="install" />
				<RemoveFile Id="RemovePac" Name="PacDrive32.dll" On="install" />
				<RemoveFile Id="RemoveHue" Name="Q42.HueApi.dll" On="install" />
				<RemoveFile Id="RemoveHueCC" Name="Q42.HueApi.ColorConverters.dll" On="install" />
				<RemoveFile Id="RemoveExts" Name="$(var.Extensions.TargetFileName)" On="install" />

        <File Id="MainDofDll" Source="$(var.DirectOutput.TargetPath)" />
        <File Source="$(var.DirectOutput.TargetDir)DirectOutputShapes.png" />
        <File Source="$(var.DirectOutput.TargetDir)DirectOutputShapes.xml" />
        <File Source="$(var.B2SServerPlugin.TargetPath)" />

        <!-- NOTE: DirectOutputComObject is included separately via Generated/RegisterDirectOutputComObjectDll.wxs -->

        <File Source="$(var.DirectOutput PinballX Plugin.TargetPath)" />
        <File Source="$(var.DirectOutputComObjectRegister.TargetPath)" />
        <File Source="$(var.DirectOutputConfigTester.TargetPath)" />
        <File Source="$(var.GlobalConfigEditor.TargetPath)" />
        <File Source="$(var.LedControlFileTester.TargetPath)" />

        <File Source="$(var.ProPinballSlave.TargetPath)" />

        <File Source="$(var.SolutionDir)LICENSE" />
      
      </Component>
    </DirectoryRef>

    <DirectoryRef Id="DOFCONFIGEXAMPLESDIR">
      <Component Id="SampleConfigFiles" Guid="F372286A-B036-471C-AC42-357EBCB9EBD3">
        <File Source="$(var.SolutionDir)config\examples\Cabinet.xml" />
        <File Source="$(var.SolutionDir)config\examples\GlobalConfig_B2SServer.xml" />
      </Component>
    </DirectoryRef>
  </Fragment>

  <Fragment>
    <UI Id="WixUI_InstallDirCustom">
      <TextStyle Id="WixUI_Font_Normal" FaceName="Tahoma" Size="8" />
      <TextStyle Id="WixUI_Font_Bigger" FaceName="Tahoma" Size="12" />
      <TextStyle Id="WixUI_Font_Title" FaceName="Tahoma" Size="9" Bold="yes" />

      <Property Id="DefaultUIFont" Value="WixUI_Font_Normal" />
      <Property Id="WixUI_Mode" Value="InstallDir" />

      <DialogRef Id="BrowseDlg" />
      <DialogRef Id="DiskCostDlg" />
      <DialogRef Id="ErrorDlg" />
      <DialogRef Id="FatalError" />
      <DialogRef Id="FilesInUse" />
      <DialogRef Id="MsiRMFilesInUse" />
      <DialogRef Id="PrepareDlg" />
      <DialogRef Id="ProgressDlg" />
      <DialogRef Id="ResumeDlg" />
      <DialogRef Id="UserExit" />

      <Publish Dialog="BrowseDlg" Control="OK" Event="DoAction" Value="WixUIValidatePath" Order="3">1</Publish>
      <Publish Dialog="BrowseDlg" Control="OK" Event="SpawnDialog" Value="InvalidDirDlg" Order="4"><![CDATA[NOT WIXUI_DONTVALIDATEPATH AND WIXUI_INSTALLDIR_VALID<>"1"]]></Publish>

      <Publish Dialog="ExitDialog" Control="Finish" Event="EndDialog" Value="Return" Order="999">1</Publish>

      <Publish Dialog="WelcomeDlg" Control="Next" Event="NewDialog" Value="InstallDirDlg">NOT Installed</Publish>
      <Publish Dialog="WelcomeDlg" Control="Next" Event="NewDialog" Value="VerifyReadyDlg">Installed AND PATCH</Publish>

      <Publish Dialog="InstallDirDlg" Control="Back" Event="NewDialog" Value="WelcomeDlg">1</Publish>
      <Publish Dialog="InstallDirDlg" Control="Next" Event="SetTargetPath" Value="[WIXUI_INSTALLDIR]" Order="1">1</Publish>
      <Publish Dialog="InstallDirDlg" Control="Next" Event="DoAction" Value="WixUIValidatePath" Order="2">NOT WIXUI_DONTVALIDATEPATH</Publish>
      <Publish Dialog="InstallDirDlg" Control="Next" Event="SpawnDialog" Value="InvalidDirDlg" Order="3"><![CDATA[NOT WIXUI_DONTVALIDATEPATH AND WIXUI_INSTALLDIR_VALID<>"1"]]></Publish>
      <Publish Dialog="InstallDirDlg" Control="Next" Event="NewDialog" Value="VerifyReadyDlg" Order="4">WIXUI_DONTVALIDATEPATH OR WIXUI_INSTALLDIR_VALID="1"</Publish>
      <Publish Dialog="InstallDirDlg" Control="ChangeFolder" Property="_BrowseProperty" Value="[WIXUI_INSTALLDIR]" Order="1">1</Publish>
      <Publish Dialog="InstallDirDlg" Control="ChangeFolder" Event="SpawnDialog" Value="BrowseDlg" Order="2">1</Publish>

      <Publish Dialog="VerifyReadyDlg" Control="Back" Event="NewDialog" Value="InstallDirDlg" Order="1">NOT Installed</Publish>
      <Publish Dialog="VerifyReadyDlg" Control="Back" Event="NewDialog" Value="MaintenanceTypeDlg" Order="2">Installed AND NOT PATCH</Publish>
      <Publish Dialog="VerifyReadyDlg" Control="Back" Event="NewDialog" Value="WelcomeDlg" Order="2">Installed AND PATCH</Publish>

      <Publish Dialog="MaintenanceWelcomeDlg" Control="Next" Event="NewDialog" Value="MaintenanceTypeDlg">1</Publish>

      <Publish Dialog="MaintenanceTypeDlg" Control="RepairButton" Event="NewDialog" Value="VerifyReadyDlg">1</Publish>
      <Publish Dialog="MaintenanceTypeDlg" Control="RemoveButton" Event="NewDialog" Value="VerifyReadyDlg">1</Publish>
      <Publish Dialog="MaintenanceTypeDlg" Control="Back" Event="NewDialog" Value="MaintenanceWelcomeDlg">1</Publish>

      <Property Id="ARPNOMODIFY" Value="1" />
    </UI>

    <UIRef Id="WixUI_Common" />
  </Fragment>

</Wix>
